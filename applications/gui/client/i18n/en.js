export default {
  message: {
    configuration: 'Configuration',
    create: 'Create',
    edit: 'Edit',
    monitoring: 'monitoring',
    agent_tools: 'Agent Tools',
    agents: 'Agents',
    queues: "Queues",
    skill: "Skill",
    skills: "Skills",
    flows: "Flows",
    home: "Home",
    ok: "Ok",
    cancel: "Cancel",
    save: "Save",
    name: "Name",
    type: "Type",
    value: "Value",
    values: "Values",
    search: "Search",
    description: "Description",
    delete: "Delete",
    deleteAction: "Delete...",
    enterSkill: "Skill",
    add: "Add",
    addValue: "Add a value",
    endOfRecords: "No more records to show",
    refreshInterval: "Refresh Interval (seconds)",
    error: "Error",
    required_: '(required)',
    optional_: '(optional)',
    true: 'True',
    false: 'False',
    enterString: 'Enter string',
    enterNumber: 'Enter number',
    matchType: "Match Type",
    addGroup: "Add skills group",
    raw: "Raw",
    select: "Select",
    queue: "Queue",
    login: "Login",
    loginToCR: "Login to Comms Router GUI",
    loginToContinue: "Please relogin to continue",
    loginFailed: "Login failed. Please, try again later.",
    logout: "Logout",
    user: "User",
    admin: "Admin",
    role_: "role: {role}",
    router: "Router",
    routers: "Routers",
    yes: "Yes",
    never: "Never",
    notSet_: "<not set>",
    welcome: "Welcome ",
    skillsView: {
      manageSkills: "Manage Skills",
      empty: "No skills",
      add: "Add Skill",
      newSkillTitle: "Add skill",
      editSkillTitle: "Edit skill",
      allowMultipleValues: "Allow multiple values",
      range: "Allowed ranges",
      startRange: "Min",
      endRange: "Max",
      filter: "Filter",
      filterDescr: "A regular expression filter",
      typeEnum: "Value set",
      typeText: "Text",
      typeNumber: "Number",
      typeBoolean: "Boolean",
      valueDescr: "Add all values separated by comma",
      addInterval: "Add Interval",
      removeInterval: "Remove Interval",
      acceptableValues: "Acceptable values",
      nameMessage: "Special characters not allowed: \" ' ( ) ; , = ! ~ < > and space",
      errors: {
        emptyInterval: "Intervals cannot be empty",
        maxLowerMin: "Max value should be greater than or equal to the Min value",
        alreadyIncludedInterval: "Already included in {0} - {1}",
        invalidNumber: "Please enter valid numbers",
        failedCreate: "Failed to create skill",
        failedEdit: "Failed to edit skill",
        failedRetrieve: "Failed to retrieve skills",
      },
      delete: {
        title: "Delete Skill",
        prompt: "Are you sure you want to delete skill {ref}?",
        confirm: "Delete",
        reject: "Cancel"
      },
      tooltip: {
        enumeration: "A skill with a pre-defined set of acceptable values (e.g. values for \"department\" could be sales, engenering, marketing...)",
        number: "A skill that takes a numeric value (e.g. the age of the customer, a score). You can also add one or multiple ranges of values to enforce below.",
        text: "A skill with a value that cannot be defined beforehand (e.g. products SKUs, notes about the customer...)",
        multipleValues: "Check for skills, which allow multiple values to be assigned. For example an agent can speak multiple languages, but can only work in a single department. The system will enforce this when defining the skills of agents."
      }
    },
    agentsView: {
      title:"Manage Agents",
      empty: "No Agents",
      add: "Add Agent",
      createAgent: "Create Agent",
      editAgent: "Edit Agent",
      address: "Address",
      capabilities: "Skillset",
      servesQueues: "Serves Queues",
      state:"State",
      lastBusy:"Last Busy",
      phoneOrSip: "Phone or SIP",
      delete: {
        title: "Delete Agent",
        prompt: "Are you sure you want to delete agent {name}?",
        confirm: "Delete",
        reject: "Cancel",
      },
      confirmDeleteTitle: "Delete capability",
      confirmDeletePrompt: "Are you sure you want to delete this capability?",
      confirmDeleteButtonText: "Delete",
      search: "Search by name, description or address",
      searchMonit: "Search by name, address",
      nameAgent: "Name of the Agent",
      descriptionAgent: "Description of the Agent",
      addCapability: "Add skill",
      enterRegex: "Regex: {0}",
      enterNumber: "Enter numbers: {0}",
      errors: {
        regexFail: "{0} does not pass {1} regex",
        notNumber: "{0} is not a number",
        failedSkillIntervals: "{0} is outside the range for {1}",
        skillAlreadAdded: "Skill already added.",
        failedCreate: "Failed to create agent",
        failedEdit: "Failed to edit agent",
        failedDelete: "Failed to delete agent",
        failedRetrieve: "Failed to retrieve agents",
        failedSetState: "Failed to set agent's state",
        unknownSkill: "Unknown skill: {0}"
      }
    },
    queuesView: {
      title:"Manage Queues",
      empty: "No Queues",
      predicate: "Agents filter",
      add: "Add Queue",
      create: "Create Queue",
      edit: "Edit Queue",
      search: "Search by name or description",
      size: "Size",
      tasks: "Tasks",
      all: "All",
      none: "None",
      delete: {
        title: "Delete Queue",
        prompt: "Do you really want to delete queue {ref} - {description}?",
        confirm: "Delete",
        reject: "Cancel"
      },
      onHold_: 'On hold',
      callback_: 'Callback',
      errors: {
        failedCreate: "Failed to create queue",
        failedEdit: "Failed to edit queue",
        failedDelete: "Failed to delete queue",
        failedRetrieve: "Failed to retrieve queues",
      }
    },
    flowsView: {
      title:"Manage Flows",
      empty: "No Flows",
      add: "Add Flow",
      search: "Search by name or description",
      tags: "Tags",
      rule: "Rule",
      editRule: "Edit Rule",
      addRule: "Add Rule",
      deleteFlow: "@:message.delete",
      deleteRule: "Delete Rule",
      deleteAction: "Delete Action",
      editAction: "Edit Action",
      editDefaultRoute: "Edit Default Route",
      addAction: "Add Action",
      flowName: "Name:",
      description: "Description:",
      predicate: "Tasks filter",
      graph: {
        ruleSetLabel: 'Rule Set',
        actionTypes: {
          routeToQueue: 'Route to Queue'
        },
        actionLabel: "Action",
        ruleLabel: "Rule: {tag}",
        actionType: "Action:",
        priority: "Priority:",
        timeout: "Timeout:",
        seconds: "s",
        queue: "Queue",
        notSet: 'not set',
        defaultRule: 'Default Rule',
        defaultRuleDescription: 'All tasks that are not matched for previous rules will be processed here',
        defaultRoute: 'Default Route',
        tooltip: {
          addAction: "Create new Action",
          editRule: "Edit Rule {tag}",
          editAction: "Edit Action",
          moveRuleUp: "Move the Rule Up",
          moveRuleDown: "Move the Rule Down",
          moveActionLeft: "Move the Action to Left",
          moveActionRight: "Move the Action Right",
        }
      },
      delete: {
        title:"Delete flow",
        prompt:"Do you really want to delete flow {ref} - {description}?",
        confirm:"Delete",
        reject:"Cancel",
      },
      errors: {
        emptyQueue: "Please, enter the destination queue of the default rule.",
        failedRetrieve: "Failed to retrieve flows",
      },
      actionType: "Action",
      priority: "Set Task Priority to:",
      timeout: "Set Task Timeout to:",

    },
    errors: {
      emptyField: "Please fill in this field.",
      failedParsePredicate: "Failed to parse predicate"
    }
  },
  // date time formats
  short: {
    year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric'
  },
  long: {
    year: 'numeric', month: 'short', day: 'numeric',
    weekday: 'short', hour: 'numeric', minute: 'numeric'
  }
}
