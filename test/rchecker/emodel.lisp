(in-package :rchecker)
(defparameter *tasks*
  (list
   (list (for
          (fnot (fhas-key "agents"))
          (fand (fhas-kv "agents" 2 #'(lambda(js-val val)(< (length js-val) val)))))
         #'(lambda(model)(let ((res (funcall (eagent-new))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model)
                                           ("agents" (list* (jsown:extend-js (first res)
                                                              ("state" "offline"))
                                                            (when (jsown:keyp model "agents")
                                                              (jsown:val model "agents")))))
                                         model))))
         "create agent")

   (list (fand (fhas-key "agents")
               (fhas-kv "agents" 0 #'(lambda(js-val val)(> (length js-val) val))))
         #'(lambda(model)(let ((res (funcall (tstep-result "Select the latest agent." 0 t "Select the latest agent." nil))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model) ("selected-agent" 0))
                                         model))))
         "select last agent")
   (list (fand (fhas-key "agents")
               (fhas-key "selected-agent")
               (fcompare-keys "selected-agent" "agents" #'(lambda(selected items)(< (1+ selected) (length items)))))
         #'(lambda(model)(let* ((next (1+ (jsown:val model "selected-agent")))
                                (res (funcall (tstep-result "Select previous agent" next t "Select previous agent" nil))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model) ("selected-agent" next))
                                         model))))
         "select next agent")

   (list (fand
          (for
           (fnot (fhas-key "tasks"))
           (fand (fhas-key "tasks") #'(lambda(model) (every #'(lambda(task)(not (equal (jsown:val task "state") "waiting")))
                                                            (jsown:val model"tasks")))))

          (fhas-key "selected-agent")
          (fnth "selected-agent" "agents"
                (fnot (fhas-kv "state" "ready" #'equal))))
         #'(lambda(model)
             (let* ((selected (jsown:val model "selected-agent"))
                    (agents (jsown:val model "agents"))
                    (agent (nth selected agents))
                    (res (funcall (eagent-set :id (jsown:val agent "id") :state "ready"))))
               (format t "~%Selected ~A" selected)
               (format t "~%Agent old ~A" agent)
               (format t "~%Agent new ~A" (jsown::extend-js agent ("state" "ready")))
               (format t "~%Agents old ~A" agents)
               (format t "~%Agents new ~A" (set-nth selected (copy-tree agents)
                                                (jsown::extend-js agent ("state" "ready")) ))
               (list res (if (second res)
                             (jsown:extend-js (copy-tree model)
                               ("agents" (set-nth selected (copy-tree agents)
                                                  (jsown::extend-js agent ("state" "ready")) )))
                             model))))
         "set-agent ready if there are no waiting tasks")

   (list (fhas-key "selected-agent")
         #'(lambda(model)(let* ((selected (jsown:val model "selected-agent"))
                                (agents (jsown:val model "agents"))
                                (agent (nth selected agents))
                                (res (funcall (eagent :id (jsown:val agent "id") :checks (has-kv "state" (jsown:val agent "state"))))))
                           (list res model)))
         "check agent state")

   (list (fhas-key "selected-agent")
         #'(lambda(model)(let* ((selected (jsown:val model "selected-agent"))
                                (agents (jsown:val model "agents"))
                                (agent (nth selected agents))
                                (res (funcall (eagent-del :id (jsown:val agent "id")))))
                           (list res (if (second res)
                                         (jsown:remkey (jsown:extend-js(copy-tree model)
                                                         ("agents" (remove-nth selected (copy-tree agents))))
                                                       "selected-agent")
                                         model))))
         "delete agent")

;; tasks
   (list (fand
          (for
           (fnot (fhas-key "tasks"))
           (fand (fhas-kv "tasks" 10 #'(lambda(js-val val)(< (length js-val) val)))))
          (for
           (fnot (fhas-key "agents"))
           (fand (fhas-key "agents") #'(lambda(model) (every #'(lambda(task)(not (equal (jsown:val task "state") "ready")))
                                                             (jsown:val model "agents")))) ))
         #'(lambda(model)(let ((res (funcall (etask-new))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model)
                                           ("tasks" (list* (jsown:extend-js
                                                               (first res)
                                                             ("state" "waiting") )
                                                           (when (jsown:keyp model "tasks")
                                                             (jsown:val model "tasks")))))
                                         model))))
         "create task when there are no ready agents")

;; (list (fand
;;           (for
;;            (fnot (fhas-key "tasks"))
;;            (fand (fhas-kv "tasks" 10 #'(lambda(js-val val)(< (length js-val) val)))))
;;           (for
;;            (fnot (fhas-key "agents"))
;;            (fand (fhas-key "agents") #'(lambda(model) (some #'(lambda(task)(equal (jsown:val task "state") "ready"))
;;                                                              (jsown:val model"agents"))))
;;            (fand (fhas-kv "tasks" 10 #'(lambda(js-val val)(< (length js-val) val))))))
;;          #'(lambda(model)(let ((res (funcall (etask-new))))
;;                            (list res (if (second res)
;;                                          (jsown:extend-js (copy-tree model)
;;                                            ("tasks" (list* (jsown:extend-js
;;                                                                (first res)
;;                                                              ("state" "waiting") )
;;                                                            (when (jsown:keyp model "tasks")
;;                                                              (jsown:val model "tasks")))))
;;                                          model))))
;;          "create task when there are ready agents")


   (list (fand (fhas-key "tasks")
               (fhas-kv "tasks" 0 #'(lambda(js-val val)(> (length js-val) val))))
         #'(lambda(model)(let ((res (funcall (tstep-result "Select the latest task." 0 t "Select the latest task." nil))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model) ("selected-task" 0))
                                         model))))
         "select last task")
   (list (fand (fhas-key "tasks")
               (fhas-key "selected-task")
               (fcompare-keys "selected-task" "tasks" #'(lambda(selected tasks)(< (1+ selected) (length tasks)))))
         #'(lambda(model)(let* ((next (1+ (jsown:val model "selected-task")))
                                (res (funcall (tstep-result "Select previous task." next t "Select the previous task." nil))))
                           (list res (if (second res)
                                         (jsown:extend-js (copy-tree model) ("selected-task" next))
                                         model))))
         "select next task")

   (list (fhas-key "selected-task")
         #'(lambda(model)(let* ((selected (jsown:val model "selected-task"))
                                (tasks (jsown:val model "tasks"))
                                (task (nth selected tasks))
                                (res (funcall (etask :id (jsown:val task "id") :state (jsown:val task "state")))))
                           (list res model)))
         "task is waiting")

   (list (fhas-key "selected-task")
         #'(lambda(model)(let* ((selected (jsown:val model "selected-task"))
                                (tasks (jsown:val model "tasks"))
                                (res (funcall (etask-del :id (jsown:val (nth selected tasks) "id")))))
                           (list res (if (second res)
                                         (jsown:remkey (jsown:extend-js(copy-tree model)
                                                         ("tasks" (remove-nth selected (copy-tree tasks))))
                                                       "selected-task")
                                         model))))
         "delete task")))
